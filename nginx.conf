worker_processes 1;
error_log /dev/stdout info;

env REDISMASTER_PORT_6379_TCP_ADDR;
env REDISSLAVE_PORT_6379_TCP_ADDR;

events {
    worker_connections 256;
}

http {
    access_log /dev/stdout;

    lua_package_path "/opt/lua-resty-redis/lib/?.lua;;";
    lua_code_cache off;  ## DEBUG only

    upstream server_nodes {
        ip_hash;
        server server1:3000;
        server server2:3000;
    }

    server {
        listen       8080;
        server_name  _;
        proxy_set_header Host $host;
        proxy_http_version 1.1;


        location / {
            proxy_pass http://server_nodes;
        }

        ###
        ### Example
        ###
        location /bar {
            proxy_pass http://server_nodes;

	    access_by_lua_file  /opt/access-by.lua;
	    rewrite_by_lua_file /opt/rewrite-by.lua;
	    content_by_lua_file /opt/content-by.lua;
        }

        ###
        ### Example
        ###
        location /foo {
            proxy_pass http://server_nodes;

	    access_by_lua  'ngx.ctx.foo = 123';
	    #rewrite_by_lua 'ngx.ctx.foo = ngx.ctx.foo + 9';
	    content_by_lua 'ngx.say("foo: " .. ngx.ctx.foo)';
        }

        ###
        ### Example
        ###
	location /hellolua {
	    content_by_lua '
	      local redis = require "resty.redis"
	      local redm = redis:new()
	      local reds = redis:new()
	      redm:set_timeout(1000) -- 1 sec
	      reds:set_timeout(1000) -- 1 sec

              --local ok, err = red:connect("redismaster", 6379)  ## hostname cannot be resolved somehow
	      --                                                  ## need to use env vars
	      local rmaster = os.getenv("REDISMASTER_PORT_6379_TCP_ADDR")
              local ok, err = redm:connect(rmaster, 6379)
	      if not ok then
                ngx.say("failed to connect: ", err)
		return
	      end
	      local rslave = os.getenv("REDISSLAVE_PORT_6379_TCP_ADDR")
              local ok, err = reds:connect(rslave, 6379)
	      if not ok then
                ngx.say("failed to connect: ", err)
		return
	      end

              local ok, err = redm:set("dog", "an animal " .. os.date())
	      if not ok then
                ngx.say("failed to set dog: ", err)
		return
	      end
              ngx.say("set to ", rmaster)

              local res, err = reds:get("dog")
	      if not res then
                ngx.say("failed to get dog: ", err)
		return
	      end
              ngx.say("get from ", rslave)
	      ngx.say("dog: ", res)

              --
              -- Next code does not work as exepcted
              --
	      local ok, err = redm.set("cnt", "1")
              if not ok then
                  ngx.say("failed to set to cnt: ", err)
              end
              local ok, err = redm.incr("cnt")
	      if not ok then
		ngx.say("failed to incr: ", err)
	      end
	      local ok1, err = redm.set("last-access", os.date())
	      if not ok1 then
		ngx.say("failed to set last-access: ", err)
	      end

	    ';
	}
   }
}
